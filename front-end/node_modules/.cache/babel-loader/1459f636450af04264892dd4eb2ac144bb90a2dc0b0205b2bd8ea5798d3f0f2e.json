{"ast":null,"code":"// Simula una base de datos en memoria para el desarrollo\nconst inMemoryDb = {\n  users: [],\n  pos: [],\n  suppliers: [],\n  cutTypes: {},\n  invoices: [],\n  cuts: [],\n  orders: []\n};\n\n// Función auxiliar para simular latencia de red\nconst simulateNetworkLatency = data => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(data);\n    }, 300); // Simula 300ms de latencia\n  });\n};\n\n// Simula la carga inicial de datos (como si vinieran de una API al iniciar la app)\n// En un entorno real, esto se cargaría desde el backend\nexport const initializeDb = async () => {\n  const storedUsers = localStorage.getItem('users');\n  if (storedUsers) {\n    inMemoryDb.users = JSON.parse(storedUsers);\n  } else {\n    // Datos iniciales si no hay nada en localStorage\n    inMemoryDb.users = [{\n      id: 'user-admin-001',\n      fullName: 'Administrador Principal',\n      username: 'admin',\n      userId: 'ADMIN001',\n      email: 'admin@ejemplo.com',\n      password: 'admin1234',\n      role: 'Admin'\n    }, {\n      id: 'user-operario-001',\n      fullName: 'Operario Ejemplo',\n      username: 'operario1',\n      userId: 'OP001',\n      email: 'operario1@ejemplo.com',\n      password: 'password123',\n      role: 'Operario'\n    }];\n    localStorage.setItem('users', JSON.stringify(inMemoryDb.users));\n  }\n  const storedPos = localStorage.getItem('pos');\n  if (storedPos) {\n    inMemoryDb.pos = JSON.parse(storedPos);\n  } else {\n    inMemoryDb.pos = [{\n      id: 'pos-001',\n      name: 'Punto de Venta Centro',\n      location: 'Calle Principal 123'\n    }, {\n      id: 'pos-002',\n      name: 'Punto de Venta Sur',\n      location: 'Avenida Siempre Viva 456'\n    }];\n    localStorage.setItem('pos', JSON.stringify(inMemoryDb.pos));\n  }\n  const storedSuppliers = localStorage.getItem('suppliers');\n  if (storedSuppliers) {\n    inMemoryDb.suppliers = JSON.parse(storedSuppliers);\n  } else {\n    inMemoryDb.suppliers = [{\n      id: 'sup-001',\n      name: 'Ganadería La Esperanza',\n      contact: 'Juan Pérez',\n      phone: '5512345678'\n    }, {\n      id: 'sup-002',\n      name: 'Distribuidora El Novillo',\n      contact: 'María García',\n      phone: '3398765432'\n    }, {\n      id: 'sup-003',\n      name: 'Carnes Finas del Norte',\n      contact: 'Carlos López',\n      phone: '8123456789'\n    }];\n    localStorage.setItem('suppliers', JSON.stringify(inMemoryDb.suppliers));\n  }\n  const storedCutTypes = localStorage.getItem('cutTypes');\n  if (storedCutTypes) {\n    inMemoryDb.cutTypes = JSON.parse(storedCutTypes);\n  } else {\n    inMemoryDb.cutTypes = {\n      Res: ['Sirloin', 'Ribeye', 'T-Bone', 'Arrachera', 'Filete', 'Aguja'],\n      Cerdo: ['Pierna', 'Espalda', 'Costilla', 'Lomo', 'Chuleta'],\n      Pollo: ['Pechuga', 'Muslo', 'Pierna', 'Alas'],\n      Otro: ['Corte Genérico']\n    };\n    localStorage.setItem('cutTypes', JSON.stringify(inMemoryDb.cutTypes));\n  }\n  const storedInvoices = localStorage.getItem('invoices');\n  if (storedInvoices) {\n    inMemoryDb.invoices = JSON.parse(storedInvoices);\n  } else {\n    inMemoryDb.invoices = [];\n    localStorage.setItem('invoices', JSON.stringify(inMemoryDb.invoices));\n  }\n  const storedCuts = localStorage.getItem('cuts');\n  if (storedCuts) {\n    inMemoryDb.cuts = JSON.parse(storedCuts);\n  } else {\n    inMemoryDb.cuts = [];\n    localStorage.setItem('cuts', JSON.stringify(inMemoryDb.cuts));\n  }\n  const storedOrders = localStorage.getItem('orders');\n  if (storedOrders) {\n    inMemoryDb.orders = JSON.parse(storedOrders);\n  } else {\n    inMemoryDb.orders = [];\n    localStorage.setItem('orders', JSON.stringify(inMemoryDb.orders));\n  }\n  return simulateNetworkLatency(inMemoryDb);\n};\n\n// Simula una llamada GET a la API\nexport const apiGet = async entity => {\n  if (!inMemoryDb[entity]) {\n    throw new Error(`Entidad ${entity} no encontrada en la base de datos simulada.`);\n  }\n  return simulateNetworkLatency(inMemoryDb[entity]);\n};\n\n// Simula una llamada POST a la API\nexport const apiPost = async (entity, data) => {\n  if (!inMemoryDb[entity]) {\n    throw new Error(`Entidad ${entity} no encontrada en la base de datos simulada.`);\n  }\n  const newId = `${entity.slice(0, -1)}-${Date.now()}`; // Genera un ID simple\n  const newItem = {\n    id: newId,\n    ...data\n  };\n  inMemoryDb[entity].push(newItem);\n  localStorage.setItem(entity, JSON.stringify(inMemoryDb[entity]));\n  return simulateNetworkLatency(newItem);\n};\n\n// Simula una llamada PUT a la API\nexport const apiPut = async (entity, id, data) => {\n  if (!inMemoryDb[entity]) {\n    throw new Error(`Entidad ${entity} no encontrada en la base de datos simulada.`);\n  }\n  const index = inMemoryDb[entity].findIndex(item => item.id === id);\n  if (index === -1) {\n    throw new Error(`Item con ID ${id} no encontrado en la entidad ${entity}.`);\n  }\n  const updatedItem = {\n    ...inMemoryDb[entity][index],\n    ...data,\n    id: id\n  };\n  inMemoryDb[entity][index] = updatedItem;\n  localStorage.setItem(entity, JSON.stringify(inMemoryDb[entity]));\n  return simulateNetworkLatency(updatedItem);\n};\n\n// Simula una llamada DELETE a la API\nexport const apiDelete = async (entity, id) => {\n  if (!inMemoryDb[entity]) {\n    throw new Error(`Entidad ${entity} no encontrada en la base de datos simulada.`);\n  }\n  const initialLength = inMemoryDb[entity].length;\n  inMemoryDb[entity] = inMemoryDb[entity].filter(item => item.id !== id);\n  if (inMemoryDb[entity].length === initialLength) {\n    throw new Error(`Item con ID ${id} no encontrado en la entidad ${entity}.`);\n  }\n  localStorage.setItem(entity, JSON.stringify(inMemoryDb[entity]));\n  return simulateNetworkLatency({\n    message: 'Eliminado con éxito'\n  });\n};\n\n// Funciones de compatibilidad para los componentes existentes\n// Ahora estas funciones llamarán a las simulaciones de API\nexport const getStorage = async key => {\n  try {\n    const data = await apiGet(key);\n    return data;\n  } catch (error) {\n    console.error(`Error al obtener ${key}:`, error);\n    return null; // O manejar el error de otra forma\n  }\n};\nexport const setStorage = async (key, value) => {\n  try {\n    // Para setStorage, simulamos una actualización completa de la entidad\n    // En un backend real, esto sería más granular (PUT para un item, etc.)\n    // Aquí, simplemente actualizamos la \"base de datos\" en memoria\n    inMemoryDb[key] = value;\n    localStorage.setItem(key, JSON.stringify(value));\n    return simulateNetworkLatency({\n      message: 'Datos guardados'\n    });\n  } catch (error) {\n    console.error(`Error al guardar ${key}:`, error);\n    throw error;\n  }\n};\nexport const createStorage = async (key, initialValue) => {\n  // Esta función ahora solo asegura que la entidad exista en la DB simulada\n  // y devuelve los datos actuales. La inicialización se hace en initializeDb.\n  const data = await apiGet(key);\n  if (!data || data.length === 0) {\n    // Si no hay datos, se asume que es la primera vez y se \"crea\" con el valor inicial\n    // Esto es una simplificación para el frontend. En el backend, la creación es explícita.\n    inMemoryDb[key] = initialValue;\n    localStorage.setItem(key, JSON.stringify(initialValue));\n    return simulateNetworkLatency(initialValue);\n  }\n  return simulateNetworkLatency(data);\n};","map":{"version":3,"names":["inMemoryDb","users","pos","suppliers","cutTypes","invoices","cuts","orders","simulateNetworkLatency","data","Promise","resolve","setTimeout","initializeDb","storedUsers","localStorage","getItem","JSON","parse","id","fullName","username","userId","email","password","role","setItem","stringify","storedPos","name","location","storedSuppliers","contact","phone","storedCutTypes","Res","Cerdo","Pollo","Otro","storedInvoices","storedCuts","storedOrders","apiGet","entity","Error","apiPost","newId","slice","Date","now","newItem","push","apiPut","index","findIndex","item","updatedItem","apiDelete","initialLength","length","filter","message","getStorage","key","error","console","setStorage","value","createStorage","initialValue"],"sources":["D:/Programas/porkiapp_v1.0/front-end/src/utils/storage.js"],"sourcesContent":["// Simula una base de datos en memoria para el desarrollo\nconst inMemoryDb = {\n  users: [],\n  pos: [],\n  suppliers: [],\n  cutTypes: {},\n  invoices: [],\n  cuts: [],\n  orders: [],\n};\n\n// Función auxiliar para simular latencia de red\nconst simulateNetworkLatency = (data) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(data);\n    }, 300); // Simula 300ms de latencia\n  });\n};\n\n// Simula la carga inicial de datos (como si vinieran de una API al iniciar la app)\n// En un entorno real, esto se cargaría desde el backend\nexport const initializeDb = async () => {\n  const storedUsers = localStorage.getItem('users');\n  if (storedUsers) {\n    inMemoryDb.users = JSON.parse(storedUsers);\n  } else {\n    // Datos iniciales si no hay nada en localStorage\n    inMemoryDb.users = [\n      {\n        id: 'user-admin-001',\n        fullName: 'Administrador Principal',\n        username: 'admin',\n        userId: 'ADMIN001',\n        email: 'admin@ejemplo.com',\n        password: 'admin1234',\n        role: 'Admin',\n      },\n      {\n        id: 'user-operario-001',\n        fullName: 'Operario Ejemplo',\n        username: 'operario1',\n        userId: 'OP001',\n        email: 'operario1@ejemplo.com',\n        password: 'password123',\n        role: 'Operario',\n      },\n    ];\n    localStorage.setItem('users', JSON.stringify(inMemoryDb.users));\n  }\n\n  const storedPos = localStorage.getItem('pos');\n  if (storedPos) {\n    inMemoryDb.pos = JSON.parse(storedPos);\n  } else {\n    inMemoryDb.pos = [\n      { id: 'pos-001', name: 'Punto de Venta Centro', location: 'Calle Principal 123' },\n      { id: 'pos-002', name: 'Punto de Venta Sur', location: 'Avenida Siempre Viva 456' },\n    ];\n    localStorage.setItem('pos', JSON.stringify(inMemoryDb.pos));\n  }\n\n  const storedSuppliers = localStorage.getItem('suppliers');\n  if (storedSuppliers) {\n    inMemoryDb.suppliers = JSON.parse(storedSuppliers);\n  } else {\n    inMemoryDb.suppliers = [\n      { id: 'sup-001', name: 'Ganadería La Esperanza', contact: 'Juan Pérez', phone: '5512345678' },\n      { id: 'sup-002', name: 'Distribuidora El Novillo', contact: 'María García', phone: '3398765432' },\n      { id: 'sup-003', name: 'Carnes Finas del Norte', contact: 'Carlos López', phone: '8123456789' },\n    ];\n    localStorage.setItem('suppliers', JSON.stringify(inMemoryDb.suppliers));\n  }\n\n  const storedCutTypes = localStorage.getItem('cutTypes');\n  if (storedCutTypes) {\n    inMemoryDb.cutTypes = JSON.parse(storedCutTypes);\n  } else {\n    inMemoryDb.cutTypes = {\n      Res: ['Sirloin', 'Ribeye', 'T-Bone', 'Arrachera', 'Filete', 'Aguja'],\n      Cerdo: ['Pierna', 'Espalda', 'Costilla', 'Lomo', 'Chuleta'],\n      Pollo: ['Pechuga', 'Muslo', 'Pierna', 'Alas'],\n      Otro: ['Corte Genérico'],\n    };\n    localStorage.setItem('cutTypes', JSON.stringify(inMemoryDb.cutTypes));\n  }\n\n  const storedInvoices = localStorage.getItem('invoices');\n  if (storedInvoices) {\n    inMemoryDb.invoices = JSON.parse(storedInvoices);\n  } else {\n    inMemoryDb.invoices = [];\n    localStorage.setItem('invoices', JSON.stringify(inMemoryDb.invoices));\n  }\n\n  const storedCuts = localStorage.getItem('cuts');\n  if (storedCuts) {\n    inMemoryDb.cuts = JSON.parse(storedCuts);\n  } else {\n    inMemoryDb.cuts = [];\n    localStorage.setItem('cuts', JSON.stringify(inMemoryDb.cuts));\n  }\n\n  const storedOrders = localStorage.getItem('orders');\n  if (storedOrders) {\n    inMemoryDb.orders = JSON.parse(storedOrders);\n  } else {\n    inMemoryDb.orders = [];\n    localStorage.setItem('orders', JSON.stringify(inMemoryDb.orders));\n  }\n\n  return simulateNetworkLatency(inMemoryDb);\n};\n\n\n// Simula una llamada GET a la API\nexport const apiGet = async (entity) => {\n  if (!inMemoryDb[entity]) {\n    throw new Error(`Entidad ${entity} no encontrada en la base de datos simulada.`);\n  }\n  return simulateNetworkLatency(inMemoryDb[entity]);\n};\n\n// Simula una llamada POST a la API\nexport const apiPost = async (entity, data) => {\n  if (!inMemoryDb[entity]) {\n    throw new Error(`Entidad ${entity} no encontrada en la base de datos simulada.`);\n  }\n  const newId = `${entity.slice(0, -1)}-${Date.now()}`; // Genera un ID simple\n  const newItem = { id: newId, ...data };\n  inMemoryDb[entity].push(newItem);\n  localStorage.setItem(entity, JSON.stringify(inMemoryDb[entity]));\n  return simulateNetworkLatency(newItem);\n};\n\n// Simula una llamada PUT a la API\nexport const apiPut = async (entity, id, data) => {\n  if (!inMemoryDb[entity]) {\n    throw new Error(`Entidad ${entity} no encontrada en la base de datos simulada.`);\n  }\n  const index = inMemoryDb[entity].findIndex(item => item.id === id);\n  if (index === -1) {\n    throw new Error(`Item con ID ${id} no encontrado en la entidad ${entity}.`);\n  }\n  const updatedItem = { ...inMemoryDb[entity][index], ...data, id: id };\n  inMemoryDb[entity][index] = updatedItem;\n  localStorage.setItem(entity, JSON.stringify(inMemoryDb[entity]));\n  return simulateNetworkLatency(updatedItem);\n};\n\n// Simula una llamada DELETE a la API\nexport const apiDelete = async (entity, id) => {\n  if (!inMemoryDb[entity]) {\n    throw new Error(`Entidad ${entity} no encontrada en la base de datos simulada.`);\n  }\n  const initialLength = inMemoryDb[entity].length;\n  inMemoryDb[entity] = inMemoryDb[entity].filter(item => item.id !== id);\n  if (inMemoryDb[entity].length === initialLength) {\n    throw new Error(`Item con ID ${id} no encontrado en la entidad ${entity}.`);\n  }\n  localStorage.setItem(entity, JSON.stringify(inMemoryDb[entity]));\n  return simulateNetworkLatency({ message: 'Eliminado con éxito' });\n};\n\n// Funciones de compatibilidad para los componentes existentes\n// Ahora estas funciones llamarán a las simulaciones de API\nexport const getStorage = async (key) => {\n  try {\n    const data = await apiGet(key);\n    return data;\n  } catch (error) {\n    console.error(`Error al obtener ${key}:`, error);\n    return null; // O manejar el error de otra forma\n  }\n};\n\nexport const setStorage = async (key, value) => {\n  try {\n    // Para setStorage, simulamos una actualización completa de la entidad\n    // En un backend real, esto sería más granular (PUT para un item, etc.)\n    // Aquí, simplemente actualizamos la \"base de datos\" en memoria\n    inMemoryDb[key] = value;\n    localStorage.setItem(key, JSON.stringify(value));\n    return simulateNetworkLatency({ message: 'Datos guardados' });\n  } catch (error) {\n    console.error(`Error al guardar ${key}:`, error);\n    throw error;\n  }\n};\n\nexport const createStorage = async (key, initialValue) => {\n  // Esta función ahora solo asegura que la entidad exista en la DB simulada\n  // y devuelve los datos actuales. La inicialización se hace en initializeDb.\n  const data = await apiGet(key);\n  if (!data || data.length === 0) {\n    // Si no hay datos, se asume que es la primera vez y se \"crea\" con el valor inicial\n    // Esto es una simplificación para el frontend. En el backend, la creación es explícita.\n    inMemoryDb[key] = initialValue;\n    localStorage.setItem(key, JSON.stringify(initialValue));\n    return simulateNetworkLatency(initialValue);\n  }\n  return simulateNetworkLatency(data);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}