{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programas\\\\porkiapp_v1.0\\\\front-end\\\\src\\\\components\\\\InventoryList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getStorage } from '../utils/storage';\nimport { initialInvoices } from '../mock/invoices';\nimport { initialUsers } from '../mock/users';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InventoryList = () => {\n  _s();\n  const [cuts, setCuts] = useState([]);\n  const [invoices, setInvoices] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [inventory, setInventory] = useState({});\n  const [totalWeightByMeatType, setTotalWeightByMeatType] = useState({});\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const loadedCuts = await getStorage('cuts');\n        setCuts(loadedCuts || []);\n        const loadedInvoices = await getStorage('invoices');\n        setInvoices(loadedInvoices || []);\n        const loadedUsers = await getStorage('users');\n        setUsers(loadedUsers || []);\n      } catch (error) {\n        console.error(\"Error loading initial data for InventoryList:\", error);\n      }\n    };\n    loadData();\n  }, []);\n  useEffect(() => {\n    const groupedInventory = cuts.reduce((acc, cut) => {\n      const invoice = invoices.find(inv => inv.id === cut.invoiceId);\n      const channel = invoice ? invoice.channels.find(ch => ch.code === cut.carcassCode) : null;\n      const meatType = channel ? channel.type : 'Desconocido';\n      const originInvoiceNumber = invoice ? invoice.number : 'Desconocida';\n      if (!acc[meatType]) {\n        acc[meatType] = {};\n      }\n      const key = `${cut.cutType}-${originInvoiceNumber}`;\n      if (!acc[meatType][key]) {\n        acc[meatType][key] = {\n          cutType: cut.cutType,\n          totalWeight: 0,\n          totalQuantity: 0,\n          origins: new Set()\n        };\n      }\n      acc[meatType][key].totalWeight += cut.weight;\n      acc[meatType][key].totalQuantity += cut.quantity;\n      acc[meatType][key].origins.add(originInvoiceNumber);\n      return acc;\n    }, {});\n    Object.keys(groupedInventory).forEach(meatType => {\n      Object.keys(groupedInventory[meatType]).forEach(key => {\n        groupedInventory[meatType][key].origins = Array.from(groupedInventory[meatType][key].origins);\n      });\n    });\n    setInventory(groupedInventory);\n    const totalByMeatType = cuts.reduce((acc, cut) => {\n      const invoice = invoices.find(inv => inv.id === cut.invoiceId);\n      const channel = invoice ? invoice.channels.find(ch => ch.code === cut.carcassCode) : null;\n      const meatType = channel ? channel.type : 'Desconocido';\n      acc[meatType] = (acc[meatType] || 0) + cut.weight;\n      return acc;\n    }, {});\n    setTotalWeightByMeatType(totalByMeatType);\n  }, [cuts, invoices]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 bg-gray-50 min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold text-gray-800 mb-6\",\n      children: \"Inventario de Cortes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-6 rounded-lg shadow-md mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-semibold text-gray-800 mb-4\",\n        children: \"Total de Kilos por Tipo de Carne\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), Object.keys(totalWeightByMeatType).length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\",\n        children: Object.entries(totalWeightByMeatType).map(([meatType, totalWeight]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border border-gray-200 rounded-lg p-4\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-800 font-medium\",\n            children: [meatType, \": \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"font-normal\",\n              children: [totalWeight.toFixed(2), \" kg\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 70\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this)\n        }, meatType, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: \"No hay datos de inventario para mostrar el resumen.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold text-gray-800 mb-6\",\n      children: \"Detalle de Inventario por Tipo de Carne y Factura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), Object.keys(inventory).length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-8\",\n      children: Object.entries(inventory).map(([meatType, cutsByInvoice]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-semibold text-gray-800 mb-4\",\n          children: [\"Tipo de Carne: \", meatType]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\",\n          children: Object.entries(cutsByInvoice).map(([key, item]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border border-gray-200 rounded-lg p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-800 font-medium\",\n              children: [\"Corte: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-normal\",\n                children: item.cutType\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 69\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-800 font-medium\",\n              children: [\"Cantidad Total: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-normal\",\n                children: [item.totalQuantity, \" piezas\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 78\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-800 font-medium\",\n              children: [\"Peso Total: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-normal\",\n                children: [item.totalWeight.toFixed(2), \" kg\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 74\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-600 text-sm mt-2\",\n              children: [\"Origen (Facturas): \", item.origins.join(', ')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 21\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this)]\n      }, meatType, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-600\",\n      children: \"No hay cortes en el inventario detallado a\\xFAn.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(InventoryList, \"hOAGJbsSBe9GrDW1M4Fyh/fL6sA=\");\n_c = InventoryList;\nexport default InventoryList;\nvar _c;\n$RefreshReg$(_c, \"InventoryList\");","map":{"version":3,"names":["React","useState","useEffect","getStorage","initialInvoices","initialUsers","jsxDEV","_jsxDEV","InventoryList","_s","cuts","setCuts","invoices","setInvoices","users","setUsers","inventory","setInventory","totalWeightByMeatType","setTotalWeightByMeatType","loadData","loadedCuts","loadedInvoices","loadedUsers","error","console","groupedInventory","reduce","acc","cut","invoice","find","inv","id","invoiceId","channel","channels","ch","code","carcassCode","meatType","type","originInvoiceNumber","number","key","cutType","totalWeight","totalQuantity","origins","Set","weight","quantity","add","Object","keys","forEach","Array","from","totalByMeatType","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","entries","map","toFixed","cutsByInvoice","item","join","_c","$RefreshReg$"],"sources":["D:/Programas/porkiapp_v1.0/front-end/src/components/InventoryList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getStorage } from '../utils/storage';\nimport { initialInvoices } from '../mock/invoices';\nimport { initialUsers } from '../mock/users';\n\nconst InventoryList = () => {\n  const [cuts, setCuts] = useState([]);\n  const [invoices, setInvoices] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [inventory, setInventory] = useState({});\n  const [totalWeightByMeatType, setTotalWeightByMeatType] = useState({});\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const loadedCuts = await getStorage('cuts');\n        setCuts(loadedCuts || []);\n        const loadedInvoices = await getStorage('invoices');\n        setInvoices(loadedInvoices || []);\n        const loadedUsers = await getStorage('users');\n        setUsers(loadedUsers || []);\n      } catch (error) {\n        console.error(\"Error loading initial data for InventoryList:\", error);\n      }\n    };\n    loadData();\n  }, []);\n\n\n  useEffect(() => {\n    const groupedInventory = cuts.reduce((acc, cut) => {\n      const invoice = invoices.find(inv => inv.id === cut.invoiceId);\n      const channel = invoice ? invoice.channels.find(ch => ch.code === cut.carcassCode) : null;\n      const meatType = channel ? channel.type : 'Desconocido';\n      const originInvoiceNumber = invoice ? invoice.number : 'Desconocida';\n\n      if (!acc[meatType]) {\n        acc[meatType] = {};\n      }\n\n      const key = `${cut.cutType}-${originInvoiceNumber}`;\n\n      if (!acc[meatType][key]) {\n        acc[meatType][key] = {\n          cutType: cut.cutType,\n          totalWeight: 0,\n          totalQuantity: 0,\n          origins: new Set(),\n        };\n      }\n\n      acc[meatType][key].totalWeight += cut.weight;\n      acc[meatType][key].totalQuantity += cut.quantity;\n      acc[meatType][key].origins.add(originInvoiceNumber);\n\n      return acc;\n    }, {});\n\n    Object.keys(groupedInventory).forEach(meatType => {\n      Object.keys(groupedInventory[meatType]).forEach(key => {\n        groupedInventory[meatType][key].origins = Array.from(groupedInventory[meatType][key].origins);\n      });\n    });\n\n    setInventory(groupedInventory);\n\n    const totalByMeatType = cuts.reduce((acc, cut) => {\n      const invoice = invoices.find(inv => inv.id === cut.invoiceId);\n      const channel = invoice ? invoice.channels.find(ch => ch.code === cut.carcassCode) : null;\n      const meatType = channel ? channel.type : 'Desconocido';\n\n      acc[meatType] = (acc[meatType] || 0) + cut.weight;\n      return acc;\n    }, {});\n    setTotalWeightByMeatType(totalByMeatType);\n\n  }, [cuts, invoices]);\n\n  return (\n    <div className=\"p-6 bg-gray-50 min-h-screen\">\n      <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">Inventario de Cortes</h2>\n\n      <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\n        <h3 className=\"text-xl font-semibold text-gray-800 mb-4\">Total de Kilos por Tipo de Carne</h3>\n        {Object.keys(totalWeightByMeatType).length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {Object.entries(totalWeightByMeatType).map(([meatType, totalWeight]) => (\n              <div key={meatType} className=\"border border-gray-200 rounded-lg p-4\">\n                <p className=\"text-gray-800 font-medium\">{meatType}: <span className=\"font-normal\">{totalWeight.toFixed(2)} kg</span></p>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p className=\"text-gray-600\">No hay datos de inventario para mostrar el resumen.</p>\n        )}\n      </div>\n\n      <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">Detalle de Inventario por Tipo de Carne y Factura</h2>\n      {Object.keys(inventory).length > 0 ? (\n        <div className=\"space-y-8\">\n          {Object.entries(inventory).map(([meatType, cutsByInvoice]) => (\n            <div key={meatType} className=\"bg-white p-6 rounded-lg shadow-md\">\n              <h3 className=\"text-xl font-semibold text-gray-800 mb-4\">Tipo de Carne: {meatType}</h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {Object.entries(cutsByInvoice).map(([key, item]) => (\n                  <div key={key} className=\"border border-gray-200 rounded-lg p-4\">\n                    <p className=\"text-gray-800 font-medium\">Corte: <span className=\"font-normal\">{item.cutType}</span></p>\n                    <p className=\"text-gray-800 font-medium\">Cantidad Total: <span className=\"font-normal\">{item.totalQuantity} piezas</span></p>\n                    <p className=\"text-gray-800 font-medium\">Peso Total: <span className=\"font-normal\">{item.totalWeight.toFixed(2)} kg</span></p>\n                    <p className=\"text-gray-600 text-sm mt-2\">Origen (Facturas): {item.origins.join(', ')}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <p className=\"text-gray-600\">No hay cortes en el inventario detallado aún.</p>\n      )}\n    </div>\n  );\n};\n\nexport default InventoryList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}